<?php

/**
 * @file
 * Contains theme override functions and preprocess functions
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_page_attachements_alter().
 * This will overwrite the default meta character type tag with HTML5 version.
 */
function skeleton_page_attachments_alter(array &$page) {
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#attributes' => [
        'charset' => 'utf-8',
      ],
    ],
    'system_meta_content_type',
  ];
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#attributes' => [
        'name' =>  'MobileOptimized',
        'content' =>  'width'
      ],
    ],
  ];
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#attributes' => [
        'name' =>  'HandheldFriendly',
        'content' =>  'true'
      ],
    ],
  ];
  $page['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#attributes' => [
        'name' =>  'viewport',
        'content' =>  'width=device-width, initial-scale=1'
      ],
    ],
  ];

  // Add Javascript for responsive mobile menu
  if (theme_get_setting('responsive_menu_state')) {
    $page['#attached']['library'][] = 'skeleton/mobile';
    $switchwidth = (int) theme_get_setting('responsive_menu_switchwidth', 'skeleton');
    $topoptiontext = theme_get_setting('responsive_menu_topoptiontext', 'skeleton');
    $page['#attached']['drupalSettings']['skeleton']['topoptiontext'] = $topoptiontext;
    $page['#attached']['drupalSettings']['skeleton']['switchwidth'] = $switchwidth;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 *   The form.
 * @param $form_state
 *   The form state.
 */
function skeleton_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state) {

  $form['mtt_settings'] = array(
    '#type' => 'vertical_tabs',
  );

  $form['responsive_menu'] = array(
    '#type' => 'details',
    '#title' => t('Responsive menu'),
    '#group' => 'mtt_settings',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  $form['responsive_menu']['responsive_menu_state'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable responsive menu'),
    '#description'   => t('Use the checkbox to enable the plugin which transforms the Main menu of your site to a dropdown select list when your browser is at mobile widths.'),
    '#default_value' => theme_get_setting('responsive_menu_state'),
  );

  $form['responsive_menu']['responsive_menu_switchwidth'] = array(
    '#type' => 'textfield',
    '#title' => t('Switch width (px)'),
    '#description'   => t('Set the width (in pixels) at which the Main menu of the site will change to a dropdown select list.'),
    '#default_value' => theme_get_setting('responsive_menu_switchwidth'),
  );

  $form['responsive_menu']['responsive_menu_topoptiontext'] = array(
    '#type' => 'textfield',
    '#title' => t('Top option text'),
    '#description'   => t('Set the very first option display text.'),
    '#default_value' => theme_get_setting('responsive_menu_topoptiontext'),
  );

}

/**
 * Implements hook_preprocess_page().
 */
function skeleton_preprocess_page(&$variables) {
  $sidebar_first = !empty($variables['page']['sidebar_first']);
  $sidebar_second = !empty($variables['page']['sidebar_second']);

  if ($sidebar_first) {
    $variables['page']['sidebar_first']['attributes']['class'][] = 'five columns';
    if ($sidebar_second) {
      $variables['page']['sidebar_second']['attributes']['class'][] = 'five columns';
      $variables['page']['content']['attributes']['class'][] = 'six columns';
    }
    else {
      $variables['page']['content']['attributes']['class'][] = 'eleven columns';
    }
  }
  else {
    if ($sidebar_second) {
      $variables['page']['content']['attributes']['class'][] = 'eleven columns';
      $variables['page']['sidebar_second']['attributes']['class'][] = 'five columns';
    }
    else {
      $variables['page']['content']['attributes']['class'][] = 'sixteen columns';
    }
  }
}

/**
 * Implements hook_preprocess_breadcrumb().
 */
function skeleton_preprocess_breadcrumb(&$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());
    $variables['breadcrumb'][] = ['text' => $title];
    $variables['#cache']['contexts'][] = 'route';
  }
}
